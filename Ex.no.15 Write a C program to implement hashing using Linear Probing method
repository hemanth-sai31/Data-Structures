#include <stdio.h>
#include <stdbool.h>

#define TABLE_SIZE 10

// Hash table structure
typedef struct {
    int key;
    int value;
} HashEntry;

HashEntry hashTable[TABLE_SIZE];

// Initialize hash table
void initHashTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i].key = -1;
        hashTable[i].value = -1;
    }
}

// Hash function
int hash(int key) {
    return key % TABLE_SIZE;
}

// Insert a key-value pair into the hash table
void insert(int key, int value) {
    int index = hash(key);
    int originalIndex = index;

    while (hashTable[index].key != -1) {
        index = (index + 1) % TABLE_SIZE;

        if (index == originalIndex) {
            printf("Hash table is full. Cannot insert.\n");
            return;
        }
    }

    hashTable[index].key = key;
    hashTable[index].value = value;
}

// Search for a value based on key
int search(int key) {
    int index = hash(key);
    int originalIndex = index;

    while (hashTable[index].key != -1) {
        if (hashTable[index].key == key) {
            return hashTable[index].value;
        }

        index = (index + 1) % TABLE_SIZE;

        if (index == originalIndex) {
            break;
        }
    }

    return -1; // Key not found
}

// Display the hash table
void displayHashTable() {
    printf("Hash Table:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hashTable[i].key != -1) {
            printf("[%d] -> %d\n", hashTable[i].key, hashTable[i].value);
        }
    }
}

int main() {
    initHashTable();

    insert(5, 50);
    insert(15, 150);
    insert(25, 250);
    insert(35, 350);
    insert(45, 450);
    
    displayHashTable();

    int searchKey = 15;
    int searchResult = search(searchKey);
    if (searchResult != -1) {
        printf("Value for key %d: %d\n", searchKey, searchResult);
    } else {
        printf("Key %d not found.\n", searchKey);
    }

    return 0;
}
